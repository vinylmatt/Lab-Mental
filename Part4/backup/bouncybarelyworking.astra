agent Main {
    module Console console;
    module System system;
    module Debug d;

    types lightOntology {
        formula switch(string, string); /* this models the state of the switch  eg sw1, on */
        formula light(string, string); /* this models the state of the light number eg l1, off */
        formula transition(string, string); /* this models a state transition */
    }

    initial switch("1","off"),switch("2","off"), light("1","off"),light("2","off");
    initial transition("off", "on");
    initial transition("on", "off");

    rule +!main(list args) {

        console.println("Start main loop After 2 seconds, switch s1 should be turned on...");
        
        system.sleep(2000);
        !flip1();
        console.println("After 2 further seconds, switch s1 should be turned off and switch s2 turned on.");
        system.sleep(2000);
        !flip1();
        !flip2();
        console.println("After 2 further seconds, switch s1 should be turned back on. This starts the party");
        !flip1();
    }

    rule +!flip1() : switch("1",string S) & transition(S, string T) {
         console.println("Switch " + T + " switch 1"); 
        -switch("1",S); 
        +switch("1",T); 
    }

    rule +!flip2() : switch("2",string S) & transition(S, string T) {
         console.println("Switch " + T + " switch 2"); 
        -switch("2",S); 
        +switch("2",T); 
    }


/* set goal for switch */

   rule +switch(string A, string S) { 
    console.println("Set Goal light switch: "+ A + " to " + S + " "); 
       
       !light(A, S); 
       }


    
/* Light firing rules, no matter what if off, turn on */

    rule +!light("1","on") : light("1","off") & light("2","off")  {
        console.println("Turn Light 1 ON");
        -light("1","off");
        +light("1","on");       
    }

    rule +!light("1","on") : light("1","off") & light("2","on") {
        console.println("Turn Light 1 ON");
        -light("1","off");
        +light("1","on");       
    }

    rule +!light("2","on") : light("2","off") & light("1","off") {
        console.println("Turn Light 2 ON");
        -light("2","off");
        +light("2","on");
    }

    rule +!light("2","on") : light("2","off") & light("1","on") {
        console.println("Turn Light 2 ON"); 
        -light("2","off");
        +light("2","on");
    }





/* Light firing rules, no matter what if on, turn off */

    rule +!light("1","off") : light("1","off") & switch("1","off") { console.println("Means End Light 1 already Off");  }
    rule +!light("1","off") : light("1","off") & switch("1","off") { console.println("Means End Light 1 already Off");  }
    rule +!light("2","off") : light("2","off") & switch("2","off") { console.println("Means End Light 2 already Off"); }
    rule +!light("2","off") : light("2","off") & switch("2","off") { console.println("Means End Light 2 already Off"); }
    rule +!light("1","on") : light("1","on") & light("2","off") { console.println("Means End Light 1 already On");  }
    rule +!light("2","on") : light("2","on") & light("1","off") { console.println("Means End Light 2 already On"); }


    /* Means end trigger on the GOAL and fix it turn light on, if off, bringing state inline */
    rule +!light("1","on") : light("1","on") & light("2","on") { 
        console.println("..........................................................Party Time 1");           
        system.sleep(2000); 
        !flip1();
        system.sleep(1000);   
        !flip2();
        system.sleep(1000);
        !flip2();
        console.println("..........................................................Party 1 Over"); 
    }

    /* Means end trigger on the GOAL and fix it turn light on, if off, bringing state inline */
    rule +!light("2","on") : light("2","on") & light("1","on")  { 
        console.println("..........................................................Party Time 2");           
        system.sleep(2000); 
        !flip1();
        system.sleep(1000);   
        !flip2();
        system.sleep(1000);
        !flip2();
        console.println("..........................................................Party 2 Over");  

         
    }


    rule +light(string L, string L2) {
        console.println("Light: " + L + " is in state: " + L2 );  
    }

}