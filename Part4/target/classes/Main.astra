/* V1 Working */

agent Main {
    module Console console;
    module Prelude P;
    module System system;
    module Debug d;

    types lightOntology {

        formula light(string, string); /* this models the state of the light number eg l1, switch off */
        formula transition(string, string); /* this models a state transition */
        formula transotherlite(string, string); /* this models a state transition */
        formula lightTransitions(list);
    }
    initial transition("off", "on");
    initial transition("on", "off");
    /* States of L1 and l2, used in the disco */
    initial lightTransitions([
        ["off", "off"],["on", "off"],["off", "on"],["on", "on"]
    ]);

    initial !discoLights();

    rule +!discoSequence ([]) {
        /*console.println("I run when the light transtions new item is empty, ATM I sleep and then go back and run the next step in rule discolights"  );*/
        system.sleep(1000); 
        !light("l2", "on");
        !light("l1", "on");
        system.sleep(1000);  
        
        !light("l2", "on");
        !light("l1", "on");
        system.sleep(1000);  
     
        !light("l2", "on");
        !light("l1", "on");
        system.sleep(1000); 
        console.println("..............................whole behaviour repeated"  );
        !discoLights();

    }

    rule +!discoSequence([list H | list T]) {
      /*console.println("discoSequence set goal L1 to " + P.valueAsString(H, 0) + " ."  );
        console.println("discoSequence set goal L2 to " + P.valueAsString(H, 1) + " ."  );*/
        !light("l1", P.valueAsString(H, 0));
        !light("l2", P.valueAsString(H, 1));
        system.sleep(2000);
        /* call recursively */
        !discoSequence(T);
    }

    rule +!discoLights() : lightTransitions (list T)  {
        /* run main sequence */
        !discoSequence(T);


    }


    /*Has the light change brought us into the party trigger?*/
    rule +!light(string A,string S) : light(A,S) & light("l1", "on") & light("l2", "on") {
        /* d.dumpBeliefs(); */

        console.println("----PARTY-----");
        system.sleep(1000); 
        -+light("l2", "off"); 
        -+light("l1", "on");
        console.println("----PARTY-----");
        system.sleep(1000); 
        -+light("l1", "off");
        -+light("l2", "on");
        console.println("----PARTY-----");
        system.sleep(1000); 
        -+light("l2", "on");
        /* this is a black tie party, appearances matter */
        console.println("Light: l2 is in state: on");
        -+light("l1", "on");
        console.println("----PARTY-----");
        system.sleep(1000); 
        -+light("l2", "off");
        -+light("l1", "off");
        console.println("----PARTY-----");
        
    }

    rule +!light(string A, string S) : light(A,S)  {
       /* console.println("Light " + A + " already correct in state '" + S + "' matching switch, do nothing ");       
        system.sleep(500);   */
    }


    rule +!light(string A,string S) :  ~light(A,S) & transition(string T, S) {
        /* d.dumpBeliefs(); */
      /*  console.println("Light "+ A +" in wrong state " + T + " fix the light by changing to " + S ); */

        -light(A,T);
        +light(A,S);
        !light(A, S);
   
    }

    rule +light(string L, string L2) {
        console.println("Light: " + L + " is in state: " + L2 );  
    }

}